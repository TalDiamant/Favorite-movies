{"version":3,"sources":["comp/AddMovie.js","comp/Movie.js","comp/AllMovies.js","App.js","serviceWorker.js","index.js"],"names":["AddMovie","_this","this","react_default","a","createElement","className","Input","onChange","handleChange","bind","placeholder","name","props","allcatagories","map","c","key","ID","type","value","Button","color","onClick","sendData","ev","setState","Object","defineProperty","target","_this2","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","state","then","r","json","data","alert","refresh","Component","Movie","Card","deleteMovie","CardImg","top","width","src","currentMovie","image","alt","CardBody","CardTitle","moviename","year","catagoryname","resp","console","log","AllMovies","allmovies","m","comp_Movie","library","add","faPlus","App","allMovies","allCatagories","refreshData","comp_AddMovie","comp_AllMovies","_this3","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ffbfc95c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Button, Input } from 'reactstrap';\n\n\nclass AddMovie extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"add\">\n          <h1>Favorite Movies</h1>\n          <Input onChange={this.handleChange.bind(this)} placeholder=\"Enter movie-name\" name=\"moviename\" />\n          <Input onChange={this.handleChange.bind(this)} placeholder=\"Enter year\" name=\"year\" />\n          <Input onChange={this.handleChange.bind(this)} placeholder=\"Enter image\" name=\"image\" />\n\n          <br />\n          <h3>Choose catagory:</h3>\n          {this.props.allcatagories.map(c => (\n            <div className=\"radios\" key={c.ID}>\n              <input onChange={this.handleChange.bind(this)} type=\"radio\" name=\"catagoryID\" value={c.ID} /><span>{c.name}</span>\n            </div>\n          ))}\n          <br />\n\n          <Button color=\"info\" onClick={this.sendData.bind(this)} >Add your movie!</Button>\n        </div>\n      </div>\n    );\n  }\n\n\n  handleChange(ev) {\n    this.setState({ [ev.target.name]: ev.target.value });\n  }\n\n\n  sendData() {\n\n    fetch('http://localhost:3000/api/addmovie', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(this.state)\n    }).then(r => r.json())\n      .then(data => {\n        alert('Your movie was added to the list');\n        this.props.refresh();\n      });\n  }\n\n\n}\n\nexport default AddMovie;\n","import React, { Component } from 'react';\nimport { Card, CardImg, CardBody, CardTitle, Button } from 'reactstrap';\n\n\nclass Movie extends Component {\n  render() {\n    return (\n      <div className=\"Movie\">\n        <div>\n          <Card>\n          <Button className=\"buttonRemove\" onClick={this.deleteMovie.bind(this)}>X</Button>\n            <CardImg top width=\"100%\" src={this.props.currentMovie.image} alt=\"Card image cap\" /> \n            <CardBody>\n              <CardTitle>Name: {this.props.currentMovie.moviename}</CardTitle>\n              <CardTitle>Year: {this.props.currentMovie.year}</CardTitle>\n              <CardTitle>catagory: {this.props.currentMovie.catagoryname}</CardTitle>\n            </CardBody>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n\n\n  async deleteMovie() {\n    let resp = await fetch('http://localhost:3000/api/deletemovie?ID=' + this.props.currentMovie.ID);\n    let data = await resp.json();\n    console.log(data);\n    this.props.refresh();\n  }\n}\n\nexport default Movie;\n","import React, { Component } from 'react';\nimport Movie from './Movie';\n \nclass AllMovies extends Component {\n  render() {\n    return (\n      <div className=\"list\">\n      <h1>Movie-list:</h1> \n        {this.props.allmovies.map(m=> <Movie  refresh={this.props.refresh}  key={m.ID} currentMovie={m}  />)}\n      </div>\n    );\n  }\n}\n\nexport default AllMovies;\n","import React, { Component } from 'react';\nimport AddMovie from './comp/AddMovie';\nimport AllMovies from './comp/AllMovies';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { faPlus } from '@fortawesome/free-solid-svg-icons'\n\nlibrary.add(faPlus)\n \nclass App extends Component {\n\nstate={\n    allMovies:[],\n    allCatagories:[]\n}\n\ncomponentDidMount()\n{\n    this.refreshData();\n    \n    fetch('http://localhost:3000/api/getallcatagories').then(r=>r.json()).then(data=>\n    {\n        this.setState({allCatagories:data});\n    })\n}\n\n  render() {\n    return (\n      <div className=\"App\">\n      <AddMovie  refresh={this.refreshData.bind(this)}  allcatagories={this.state.allCatagories}  />\n      <AllMovies refresh={this.refreshData.bind(this)}  allmovies={this.state.allMovies}   />  \n      </div>\n    );\n  }\n\n  refreshData()\n  {\n      fetch('http://localhost:3000/api/getallmovies').then(r=>r.json()).then(data=>\n        {\n                this.setState({allMovies:data});\n        }) \n     \n  } \n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}